import data.real.basic
import algebra.category.Group.basic
import category_theory.functor category_theory.yoneda
import analysis.normed.group.SemiNormedGroup

notation `Ab` := AddCommGroup

universes u

noncomputable theory
open category_theory 

instance : concrete_category Ab := by apply_instance

@[protect_proj, ancestor semi_normed_group]
class homogeneous_semi_normed_group (E : Type*) extends semi_normed_group E :=
(is_homogeneous : ‚àÄ (n : ‚Ñ§) (a : E), norm ( n ‚Ä¢ a ) = (abs n) * (norm a))

@[reducible]
def homogeneous_semi_normed_group.induced 
 {F} [homogeneous_semi_normed_group F] {E} [add_comm_group E] 
  (f : E ‚Üí+ F) : homogeneous_semi_normed_group E :=
{ is_homogeneous := Œª n a, by { 
    change ‚à• f (n ‚Ä¢ a) ‚à• = _ * ‚à• f a ‚à•, 
    rw[add_monoid_hom.map_zsmul, homogeneous_semi_normed_group.is_homogeneous]
  },
  .. semi_normed_group.induced f
}

instance : bundled_hom.parent_projection 
  @homogeneous_semi_normed_group.to_semi_normed_group := ‚ü®‚ü©

def homogeneous_normed_group_hom (V W : Type*) 
  [homogeneous_semi_normed_group V] [homogeneous_semi_normed_group W] :=
    normed_group_hom V W

def HSNAb : Type (u + 1) := bundled homogeneous_semi_normed_group

namespace HSNAb

attribute [derive [large_category, concrete_category]] HSNAb

instance : has_coe_to_sort HSNAb (Type u) := bundled.has_coe_to_sort

def of (M : Type u) [homogeneous_semi_normed_group M] : HSNAb := bundled.of M

instance (M : HSNAb) : homogeneous_semi_normed_group M := M.str

end HSNAb

def HSNAb‚ÇÅ : Type (u+1) := bundled homogeneous_semi_normed_group

namespace HSNAb‚ÇÅ

instance : has_coe_to_sort HSNAb‚ÇÅ (Type u) := bundled.has_coe_to_sort

instance : large_category.{u} HSNAb‚ÇÅ :=
{ hom := Œª X Y, { f : normed_group_hom X Y // f.norm_noninc },
  id := Œª X, ‚ü®normed_group_hom.id X, normed_group_hom.norm_noninc.id‚ü©,
  comp := Œª X Y Z f g, ‚ü®(g : normed_group_hom Y Z).comp (f : normed_group_hom X Y), g.2.comp f.2‚ü©, }

@[ext] lemma hom_ext {M N : HSNAb‚ÇÅ} (f g : M ‚ü∂ N) (w : (f : M ‚Üí N) = (g : M ‚Üí N)) :
  f = g :=
subtype.eq (normed_group_hom.ext (congr_fun w))

instance : concrete_category.{u} HSNAb‚ÇÅ :=
{ forget :=
  { obj := Œª X, X,
    map := Œª X Y f, f, },
  forget_faithful := {} }

instance has_forget_Ab : category_theory.has_forget‚ÇÇ HSNAb‚ÇÅ Ab := {
  forget‚ÇÇ := {
    obj := Œª A, AddCommGroup.of A,
    map := Œª A B f, AddCommGroup.of_hom (normed_group_hom.to_add_monoid_hom f)
  }
}

notation `U` := HSNAb‚ÇÅ.has_forget_Ab.forget‚ÇÇ 

instance (A : HSNAb‚ÇÅ) : homogeneous_semi_normed_group (AddCommGroup.of A) := A.str

end HSNAb‚ÇÅ

def transfer {A : Ab} {A' : HSNAb‚ÇÅ} (f : A ‚âÖ AddCommGroup.of A') : 
  homogeneous_semi_normed_group A := 
  homogeneous_semi_normed_group.induced f.hom

variables {C : Type*} [category C] 

def is_wf_pair {F : C ‚•§ Ab} {X Y : C} (Œ± : F.obj X) (Œ≤ : F.obj Y) := 
  ‚àÄ (n : ‚Ñï), ‚àÉ (m : ‚Ñ§) (f : X ‚ü∂ Y), m.nat_abs ‚â• n ‚àß (F.map f) Œ± = m ‚Ä¢ Œ≤

def is_weakly_flexible {F : C ‚•§ Ab} {Y : C} (Œ≤ : F.obj Y) := 
  ‚àÉ (X : C) (Œ± : F.obj X), is_wf_pair Œ± Œ≤

structure functorial_semi_norm (F : C ‚•§ Ab) := 
(lift : C ‚•§ HSNAb‚ÇÅ)
(lift_iso : F ‚âÖ (lift ‚ãô U))

example (n : ‚Ñï) (x : ‚Ñù) : n ‚Ä¢ x = (n : ‚Ñù) * x := by library_search 

example (n m : ‚Ñï) (h : n ‚â§ m) : (n : ‚Ñù) ‚â§ (m : ‚Ñù) := nat.cast_le.mpr h

example (x y z : ‚Ñù) (h : 0 ‚â§ x) (h' : y ‚â§ z) : x * y ‚â§ x * z := mul_le_mul_of_nonneg_left h' h

lemma is_zero_of_bounds {c d : ‚Ñù} (hc : c ‚â• 0) (hd : d ‚â• 0)
 (h : ‚àÄ n : ‚Ñï, ‚àÉ m : ‚Ñï, n ‚â§ m ‚àß (m : ‚Ñù) * c ‚â§ d ) : c = 0 := 
begin
  by_contra h', change c ‚â† 0 at h',
  replace h' := lt_of_le_of_ne hc h'.symm,
  rcases (archimedean.arch (d + 1) h') with ‚ü®n, hn‚ü©,
  rw[nsmul_eq_mul] at hn,
  rcases (h n) with ‚ü®m, hnm, hm‚ü©,
  exact not_le_of_gt (lt_add_one d) 
   (le_trans hn (le_trans (mul_le_mul_of_nonneg_right (nat.cast_le.mpr hnm) hc) hm))
end

lemma zero_norm_of_fsn {F : C ‚•§ Ab} (F' : functorial_semi_norm F) 
  {Y : C} {Œ≤ : F.obj Y} (h : is_weakly_flexible Œ≤) : 
    (norm : F'.lift.obj Y ‚Üí ‚Ñù) ((F'.lift_iso.app Y).hom Œ≤) = 0 := 
begin
  rcases h with ‚ü®X,Œ±,hŒ±‚ü©,
  let fX : F.obj X ‚âÖ AddCommGroup.of (F'.lift.obj X) := F'.lift_iso.app X,
  let fY : F.obj Y ‚âÖ AddCommGroup.of (F'.lift.obj Y) := F'.lift_iso.app Y,
  let Œ±' := fX.hom Œ±,
  let Œ≤' := fY.hom Œ≤,
  change ‚à• Œ≤' ‚à• = 0,
  apply is_zero_of_bounds (norm_nonneg Œ≤') (norm_nonneg Œ±'),
  intro n,
  rcases (hŒ± n) with ‚ü®m, g, hnm, hg‚ü©,
  use m.nat_abs, split, exact hnm,
  rw[int.cast_nat_abs, ‚Üê homogeneous_semi_normed_group.is_homogeneous],
  let g' : F'.lift.obj X ‚ü∂ F'.lift.obj Y := F'.lift.map g,
  have : g' Œ±' = m ‚Ä¢ Œ≤' := by {
    have := congr_hom (F'.lift_iso.hom.naturality g) Œ±,
    change fY.hom ((F.map g) Œ±) = g' (fX.hom Œ±) at this,
    rw[hg, fY.hom.map_zsmul] at this,
    symmetry, exact this
  },
  rw[‚Üê this],
  exact g'.property Œ±'
end

def is_indiscrete (A : HSNAb‚ÇÅ) := ‚àÄ (a : A), ‚à• a ‚à• = 0

def UAb : Ab ‚•§ Type u := AddCommGroup.concrete_category.forget

lemma corep_is_wf {F : C ‚•§ Ab} [functor.corepresentable (F ‚ãô UAb)]
 {Y : C} (Œ≤ : F.obj Y) : is_weakly_flexible Œ≤ := 
begin
  have c : functor.corepresentable (F ‚ãô UAb) := by apply_instance,
  rcases c with ‚ü®T, p, hp‚ü©,
  let T' : C := opposite.unop T,
  haveI := hp, 
  let p' : (T' ‚ü∂ Y) ‚Üí (F.obj Y) := p.app Y,
  let p'' : (F.obj Y) ‚Üí (T' ‚ü∂ Y) := ((as_iso p).app Y).inv,
  let u : (F.obj T') := p.app T' (ùüô T'),
  let v : ‚àÄ (n : ‚Ñ§), T' ‚ü∂ Y := Œª n, p'' (n ‚Ä¢ Œ≤),
  have hv : ‚àÄ (n : ‚Ñ§), (F.map (v n)) u = n ‚Ä¢ Œ≤ := Œª n,
  begin
    have h : p' (v n) = (p' ‚àò p'') (n ‚Ä¢ Œ≤) := rfl,
    have : p' ‚àò p'' = id := ((as_iso p).app Y).inv_hom_id, rw[this, id.def] at h,
    rw[‚Üê h],
    have : p' (v n) = p' ((coyoneda.obj T).map (v n) (ùüô T')) := by simp,
    rw[this],
    change (F.map (v n)) (p.app T' (ùüô T')) = (p.app Y) _,
    have := (congr_hom (p.naturality (v n)) (ùüô T')).symm,
    exact this,
  end,
  use T', use u, intro n, use n, use (v n),
  split, exact le_refl _, exact hv n
end

lemma corep_fsn_indiscrete {F : C ‚•§ Ab} [functor.corepresentable (F ‚ãô UAb)]
  (F' : functorial_semi_norm F) : ‚àÄ (X : C), is_indiscrete (F'.lift.obj X) := 
begin
  intros Y Œ≤', 
  let Œ≤ : F.obj Y := (F'.lift_iso.app Y).inv Œ≤',
  have : Œ≤' = (F'.lift_iso.app Y).hom Œ≤ := (congr_hom (F'.lift_iso.app Y).inv_hom_id Œ≤').symm,
  rw[this],
  exact zero_norm_of_fsn F' (corep_is_wf Œ≤),
end